from pyspark.sql import SparkSession
from  pyspark.sql.functions import split,explode,col,from_json,expr
from pyspark.sql.types import StructField,StringType,StructType,IntegerType,FloatType,TimestampType,ArrayType,DoubleType,LongType
if __name__ == '__main__':
    spark = SparkSession.builder \
        .appName('Streaming kafka as a source') \
        .master('local[*]') \
        .getOrCreate()

    kafka_df = spark.readStream \
                .format("kafka") \
                .option("kafka.bootstrap.servers","localhost:9092") \
                .option("subscribe","NoBroker") \
                .option("startingOffsets","earliest") \
                .load()

    kafka_df.printSchema()

    myschema = StructType([
            StructField("user_id", StringType()),
            StructField("property_id", StringType()),
            StructField("date", StringType()),
            StructField("event_type", StringType())
    ])

    value_df = kafka_df.select(from_json(col("value").cast("string"),myschema).alias("value"))
    select_df = value_df.select("value.user_id", "value.property_id", "value.date","value.event_type")

    interaction_df = select_df.filter(select_df.event_type == "interaction")

# Case 1 - User has done more than 9 interactions - meaning 9 interactions at any point of time.
    user_count_df = interaction_df.groupBy("user_id").count()
    rename_df = user_count_df.withColumnRenamed("count","user_count")
    where_df = rename_df.where(rename_df.user_count == 9)


    invoiceWriteQuery = where_df.writeStream \
                        .format("console") \
                        .outputMode("update") \
                        .option("truncate", "false") \
                        .option("checkpointLocation", "/home/saif/Desktop/checkpoint/dir1") \
                        .start()

    invoiceWriteQuery.awaitTermination()




